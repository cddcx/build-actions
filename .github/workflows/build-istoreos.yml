name: Build OS

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      URL:
        description: '选择源码：'
        default: 'openwrt'
        required: true
        type: choice
        options: [ openwrt,  immortalwrt ]
        
      branch:
        description: '源码的分支(immortalwrt无main)'
        default: 'openwrt-24.10'
        required: true
        type: choice
        options: [ main, master, openwrt-23.05,  openwrt-24.10 ]
        
      config_s:
        description: '选择config配置文件'
        default: 'diff.config'
        required: true
        type: choice
        options: [ diff.config, op.config, im.config ]
  
      diy1_s:
        description: '自定义diy1'
        default: 'op-diy1.sh'
        required: true
        type: choice
        options: [ op-diy1.sh, im-diy1.sh ]
          
      diy2_s:
        description: '自定义diy2'
        default: 'op-diy3.sh'
        required: true
        type: choice
        options: [ op-diy2.sh, op-diy3.sh, im-diy2.sh ]
        
      target:
        description: '选择要生成的机型：'
        default: 'x86_64'
        required: true
        type: choice
        options: [ x86_64 ]
        
      enable_wifi:
        description: '启用WiFi'
        required: true
        default: false
        type: boolean

env:
  FEEDS_CONF: feeds.conf.default
  FILES: files
  UPLOAD_BIN_DIR: false
  UPLOAD_IPK_DIR: false
  UPLOAD_RELEASE: false
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-24.04
    if: github.event.repository.owner.id == github.event.sender.id
    
    name: 编译${{github.event.inputs.URL}}-${{github.event.inputs.target}}
    env:
      REPO_URL: ${{github.event.inputs.URL}}
      CONFIG_FILE: configs/${{github.event.inputs.config_s}}
      CPU_S: ${{github.event.inputs.cpu_s}}
      DATE_S: ${{github.event.inputs.date_s}}
      TARGET_DEVICE: ${{github.event.inputs.target}}
      REPO_BRANCH: ${{github.event.inputs.branch}}
      DIY_P1_SH: diy/${{github.event.inputs.diy1_s}}
      DIY_P2_SH: diy/${{github.event.inputs.diy2_s}}

    steps:
    - name: 准备完成
      uses: actions/checkout@main

    - name: 检查服务器配置
      run: |
        echo "若分配的服务器性能不足，务必及时取消，重新运行！"
        echo -e "------------------------------- CPU信息 -------------------------------\n"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPU核心及版本信息: $(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo -e "------------------------------- 内存信息 -------------------------------\n"
        echo "已安装内存详细信息: "
        sudo lshw -short -C memory | grep GiB
        echo -e "\n"
        echo -e "------------------------------- 磁盘信息 -------------------------------\n"
        echo -e "磁盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
        echo "------------------------------- 磁盘详情 -------------------------------\n"
        df -Th

    - name: 安装 Go 稳定版
      uses: actions/setup-go@v5
      with:
        go-version: 'stable'

    - name: 设置发布环境
      run: |
        echo WORKDIR="/workdir" >> "$GITHUB_ENV"

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "------------------------------- 更新并安装依赖 -------------------------------"
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /etc/mysql /etc/php /usr/local/lib/android /opt/ghc
        sudo bash -c "curl -s https://us.cooluc.com/ubuntu-apt/sources-24.04.list > /etc/apt/sources.list"
        sudo sh -c 'echo "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-18 main" >> /etc/apt/sources.list'
        sudo sh -c 'echo "deb-src http://apt.llvm.org/jammy/ llvm-toolchain-jammy-18 main" >> /etc/apt/sources.list'
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(cat $GITHUB_WORKSPACE/depends-ubuntu-2404)
        wget https://bootstrap.pypa.io/pip/3.6/get-pip.py
        sudo python3 get-pip.py
        sudo rm -rf get-pip.py
        sudo pip install pyelftools
        echo "------------------------------- 清理Docker镜像和软件 -------------------------------"
        docker rmi `docker images -q`
        docker image prune -a -f
        sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* android* || true
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        echo "------------------------------- 设置工作目录及时区 -------------------------------"
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 克隆源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        # 设置编译源代码
        if [[ "${{github.event.inputs.URL}}" == *"openwrt"* ]]; then
            REPO_URL="https://github.com/openwrt/openwrt"
        elif [[ "${{github.event.inputs.URL}}" == *"immortalwrt"* ]]; then
            REPO_URL="https://github.com/immortalwrt/immortalwrt"
        else
            echo "源代码仓库的地址无法被识别或无法访问."
            exit 1
        fi
        # 克隆源代码
        git clone $REPO_URL -b ${{env.REPO_BRANCH}} openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: DIY1(一般用于安装依赖和插件)
      run: |
        [[ -f "${FEEDS_CONF}" ]] && cp -f ${FEEDS_CONF} openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH
        
    - name: 安装并更新feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
    - name: 加载自定义设置
      run: |
        [[ -d "${FILES}" ]] && mv -f ${FILES} openwrt/files
        [[ -e "${CONFIG_FILE}" ]] && cp -f ${CONFIG_FILE} openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: 启用WiFi
      if: github.event.inputs.enable_wifi == 'true'
      run: |
        cd openwrt
        sed -i 's/disabled=1/disabled=0/g' package/kernel/mac80211/files/lib/wifi/mac80211.sh

    - name: 下载软件包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: 检查磁盘空间
      if: (!cancelled())
      run: df -hT

    - name: 整理固件文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        # 整理固件包时候,删除您不想要的固件或者文件,让它不需要上传到Actions空间
        rm -rf packages
        rm -rf feeds.buildinfo
        rm -rf version.buildinfo
        rm -rf *kernel.bin
        rm -rf profiles.json
        rm -rf *rootfs.img
        rm -rf *rootfs.tar.gz
        rm -rf *.manifest
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: 上传固件
      uses: actions/upload-artifact@main
      with:
        name: ${{github.event.inputs.URL}}${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
