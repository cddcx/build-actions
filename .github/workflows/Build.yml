name: op

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      URL:
        description: '选择源码：'
        default: 'openwrt'
        required: true
        type: choice
        options: [ openwrt,  immortalwrt ]
        
      branch:
        description: '源码的分支(immortalwrt无main)'
        default: 'openwrt-24.10'
        required: true
        type: choice
        options: [ main, master, openwrt-23.05,  openwrt-24.10 ]
        
      config_s:
        description: '选择config配置文件'
        default: 'op.config'
        required: true
        type: choice
        options: [ op-daed.config, op.config, im.config, im-daed.config, dae.config ]
  
      diy1_s:
        description: '自定义diy1'
        default: 'op-diy1.sh'
        required: true
        type: choice
        options: [ op-diy1.sh, im-diy1.sh ]
          
      diy2_s:
        description: '自定义diy2'
        default: 'op-diy2.sh'
        required: true
        type: choice
        options: [ op-diy2.sh, op-diy2-6.12.sh, op-diy2-daed.sh, op-diy2-6.12-daed.sh, im-diy2.sh, im-diy2-daed.sh ]
        
      target:
        description: '选择要生成的机型：'
        default: 'x86_64'
        required: true
        type: choice
        options: [ x86_64 ]

env:
  FEEDS_CONF: feeds.conf.default
  FILES: files
  UPLOAD_BIN_DIR: false
  UPLOAD_IPK_DIR: false
  UPLOAD_RELEASE: false
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-24.04
    if: github.event.repository.owner.id == github.event.sender.id
    
    name: ${{github.event.inputs.URL}}-${{github.event.inputs.target}}
    env:
      REPO_URL: ${{github.event.inputs.URL}}
      CONFIG_FILE: configs/${{github.event.inputs.config_s}}
      CPU_S: ${{github.event.inputs.cpu_s}}
      DATE_S: ${{github.event.inputs.date_s}}
      TARGET_DEVICE: ${{github.event.inputs.target}}
      REPO_BRANCH: ${{github.event.inputs.branch}}
      DIY_P1_SH: diy/${{github.event.inputs.diy1_s}}
      DIY_P2_SH: diy/${{github.event.inputs.diy2_s}}

    steps:
    - name: 准备结束
      uses: actions/checkout@main
        
    - name: 释放磁盘空间
      uses: jlumbroso/free-disk-space@main
      with:
        # this might remove tools that are actually needed,
        # if set to "true" but frees about 6 GB
        tool-cache: true
        # all of these default to true, but feel free to set to
        # "false" if necessary for your workflow
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        swap-storage: true
        
    - name: 安装系统依赖
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install asciidoc bash bcc bin86 binutils bison bzip2 clang-15 llvm-15 file flex g++ g++-multilib gawk gcc-multilib gettext git gzip help2man intltool libboost-dev libelf-dev libncurses-dev libssl-dev libthread-queue-any-perl libusb-dev libxml-parser-perl make patch perl-modules python3-dev python3-pip python3-pyelftools python3-setuptools rsync sharutils swig time unzip util-linux wget xsltproc zlib1g-dev zip zstd
        sudo -E apt-get -qq install dos2unix dwarves quilt npm jq
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo add-apt-repository ppa:longsleep/golang-backports
        sudo apt -y install golang-go
        sudo apt install -y ca-certificates curl gnupg
        sudo mkdir -p /etc/apt/keyrings
        curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg
        echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_21.x nodistro main" | sudo tee /etc/apt/sources.list.d/nodesource.list
        sudo apt -y install nodejs
        sudo npm install -g pnpm
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        
    - name: 克隆源码
      working-directory: /workdir
      run: |
        # 设置编译源代码
          if [[ "${{github.event.inputs.URL}}" == *"openwrt"* ]]; then
              REPO_URL="https://github.com/openwrt/openwrt"
          elif [[ "${{github.event.inputs.URL}}" == *"immortalwrt"* ]]; then
              REPO_URL="https://github.com/immortalwrt/immortalwrt"
          else
              echo "源代码仓库的地址无法被识别或无法访问."
              exit 1
          fi
        # 克隆源代码
        git clone $REPO_URL -b ${{env.REPO_BRANCH}} openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        
    - name: DIY1(一般用于安装依赖和插件)
      run: |
        [[ -f "${FEEDS_CONF}" ]] && cp -f ${FEEDS_CONF} openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH
        
    - name: 安装并更新feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
    - name: 加载自定义设置
      run: |
        [[ -d "${FILES}" ]] && mv -f ${FILES} openwrt/files
        [[ -e "${CONFIG_FILE}" ]] && cp -f ${CONFIG_FILE} openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        
    - name: 下载软件包
     working-directory: ./openwrt
      run: |
        make defconfig
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        
    - name: 编译固件
      working-directory: ./openwrt
      run: |
        echo -e "$(nproc) thread build"
        make -j$(nproc) || make -j1 || make -j1 V=s
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
      
    - name: 整理文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && steps.compile.outputs.status  == 'success'
      run: |
        cd openwrt/bin/targets/*/*
        # 整理固件包时候,删除您不想要的固件或者文件,让它不需要上传到Actions空间
        rm -rf packages
        rm -rf feeds.buildinfo
        rm -rf version.buildinfo
        rm -rf *kernel.bin
        rm -rf profiles.json
        rm -rf *rootfs.img
        rm -rf *rootfs.tar.gz
        rm -rf *.manifest
        rm -rf sha256sums
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
        
    - name: 上传固件
      uses: actions/upload-artifact@main
      with:
        name: ${{github.event.inputs.URL}}${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
