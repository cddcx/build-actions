name: op os

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      URL:
        description: '选择源码：'
        default: 'openwrt'
        required: true
        type: choice
        options: [ openwrt,  immortalwrt ]
        
      branch:
        description: '源码的分支(immortalwrt无main)'
        default: 'openwrt-24.10'
        required: true
        type: choice
        options: [ main, master, openwrt-23.05,  openwrt-24.10 ]
        
      config_s:
        description: '选择config配置文件'
        default: 'op.config'
        required: true
        type: choice
        options: [ daed.config, op.config, im.config ]
  
      diy1_s:
        description: '自定义diy1'
        default: 'op-diy1.sh'
        required: true
        type: choice
        options: [ op-diy1.sh, im-diy1.sh ]
          
      diy2_s:
        description: '自定义diy2'
        default: 'op-diy2.sh'
        required: true
        type: choice
        options: [ op-diy2.sh, op-diy2-daed.sh, im-diy2.sh, im-diy2-daed.sh ]
        
      target:
        description: '选择要生成的机型：'
        default: 'x86_64'
        required: true
        type: choice
        options: [ x86_64 ]

env:
  FEEDS_CONF: feeds.conf.default
  FILES: files
  UPLOAD_BIN_DIR: false
  UPLOAD_IPK_DIR: false
  UPLOAD_RELEASE: false
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-24.04
    if: github.event.repository.owner.id == github.event.sender.id
    
    name: 编译${{github.event.inputs.URL}}-${{github.event.inputs.target}}
    env:
      REPO_URL: ${{github.event.inputs.URL}}
      CONFIG_FILE: configs/${{github.event.inputs.config_s}}
      CPU_S: ${{github.event.inputs.cpu_s}}
      DATE_S: ${{github.event.inputs.date_s}}
      TARGET_DEVICE: ${{github.event.inputs.target}}
      REPO_BRANCH: ${{github.event.inputs.branch}}
      DIY_P1_SH: diy/${{github.event.inputs.diy1_s}}
      DIY_P2_SH: diy/${{github.event.inputs.diy2_s}}

    steps:         
    - name: 准备结束
      uses: actions/checkout@main
        
    - name: 释放磁盘空间
      run: |
        sudo rm -rf /etc/apt/sources.list.d
        sudo bash -c "curl -s https://us.cooluc.com/ubuntu-apt/sources-24.04.list > /etc/apt/sources.list"
        sudo swapoff -a
        sudo rm -f /swapfile /mnt/swapfile
        sudo docker image prune -a -f
        sudo systemctl stop docker
        sudo snap set system refresh.retain=2
        sudo apt-get -y purge firefox clang* ghc* google* llvm* mono* mongo* mysql* php*
        sudo apt-get -y autoremove --purge
        sudo apt-get clean
        sudo rm -rf /etc/mysql /etc/php /usr/lib/jvm /usr/libexec/docker /usr/local /usr/src/* /var/lib/docker /var/lib/gems /var/lib/mysql /var/lib/snapd /etc/skel \
        /opt/{microsoft,az,hostedtoolcache,cni,mssql-tools,pipx} /usr/share/{az*,dotnet,swift,miniconda,gradle*,java,kotlinc,ri,sbt} /root/{.sbt,.local,.npm}
        sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
        rm -rf ~/{.cargo,.dotnet,.rustup}
        df -Th
        
    - name: 创建 VG & LV
      run: |
        mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
        root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
        sudo truncate -s "$mnt_size"G /mnt/mnt.img
        sudo truncate -s "$root_size"G /root.img
        sudo losetup /dev/loop6 /mnt/mnt.img
        sudo losetup /dev/loop7 /root.img
        sudo pvcreate /dev/loop6
        sudo pvcreate /dev/loop7
        sudo vgcreate github /dev/loop6 /dev/loop7
        sudo lvcreate -n runner -l 100%FREE github
        sudo mkfs.xfs /dev/github/runner
        
    - name: 挂载 LV
      run: |
        sudo mkdir -p /builder
        sudo mount /dev/github/runner /builder
        sudo chown -R runner.runner /builder
        # sudo chown $USER:$GROUPS /builder
        
    - name: 构建系统依赖
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo sh -c 'echo "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-18 main" >> /etc/apt/sources.list'
        sudo sh -c 'echo "deb-src http://apt.llvm.org/jammy/ llvm-toolchain-jammy-18 main" >> /etc/apt/sources.list'
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo -E apt-get -qq update
        sudo -E apt-get install -y asciidoc bash bcc bin86 binutils bison bzip2 clang-18 llvm-18 file flex g++ g++-multilib gawk gcc-multilib gettext git gzip help2man intltool libboost-dev libelf-dev libncurses-dev libssl-dev libthread-queue-any-perl libusb-dev libxml-parser-perl make patch perl-modules python3-dev python3-pip python3-pyelftools python3-setuptools rsync sharutils swig time unzip util-linux wget xsltproc zlib1g-dev zip zstd
        sudo -E apt-get install -y dos2unix dwarves quilt npm jq
        sudo -E npm install -g pnpm
        pip3 install --user -U pylibfdt --break-system-packages
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo -E git config --global user.name 'GitHub Actions' && git config --global user.email 'noreply@github.com'
        sudo -E git config --global core.abbrev auto
        df -Th
        sudo timedatectl set-timezone "$TZ"
        sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtimer
        
    - name: 克隆源码
      working-directory: /builder
      run: |
        # 设置编译源代码
          if [[ "${{github.event.inputs.URL}}" == *"openwrt"* ]]; then
              REPO_URL="https://github.com/openwrt/openwrt"
          elif [[ "${{github.event.inputs.URL}}" == *"immortalwrt"* ]]; then
              REPO_URL="https://github.com/immortalwrt/immortalwrt"
          else
              echo "源代码仓库的地址无法被识别或无法访问."
              exit 1
          fi
        # 克隆源代码
        git clone $REPO_URL -b ${{env.REPO_BRANCH}} openwrt
        ln -sf /builder/openwrt $GITHUB_WORKSPACE/openwrt
        
    - name: DIY1(一般用于安装依赖和插件)
      run: |
        [[ -f "${FEEDS_CONF}" ]] && cp -f ${FEEDS_CONF} openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH
        
    - name: 安装并更新feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
    - name: 加载自定义设置
      run: |
        [[ -d "${FILES}" ]] && mv -f ${FILES} openwrt/files
        [[ -e "${CONFIG_FILE}" ]] && cp -f ${CONFIG_FILE} openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        
    - name: 缓存
      id: cache
      uses: stupidloud/cachewrtbuild@main
      with:
        ccache: 'true'
        mixkey: ${{ env.CONFIG_S }}-${{env.TARGET_DEVICE}}-${{env.REPO_BRANCH}}
        skip_saving: 'true'
        prefix: /builder/openwrt
        
    - name: 下载软件包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j50
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        
    - name: 编译包
      id: compileopenwrt
      run: |
         df -h
         cd openwrt
         echo -e "$(nproc) thread compile"
         # make -j$(nproc)  || make -j1 V=s
         make tools/compile -j$(nproc) || make tools/compile -j72
         make toolchain/compile -j$(nproc) || make toolchain/compile -j72
         make target/compile -j$(nproc) || make target/compile -j72 IGNORE_ERRORS=1
         make diffconfig
         make package/compile -j$(nproc) IGNORE_ERRORS=1 || make package/compile -j72 IGNORE_ERRORS=1
         make package/index
         echo "status=success" >> $GITHUB_OUTPUT
         
    - name: 生成固件
      id: compile
      if: steps.compileopenwrt.outputs.status  == 'success'
      run: |
         df -h
         cd openwrt 
         rm -rf ./dl
          make package/install -j$(nproc) || make package/install -j1 V=s
          make target/install -j$(nproc) || make target/install -j1 V=s
          make json_overview_image_info
          make checksum
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT
      
    - name: 整理文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && steps.compile.outputs.status  == 'success'
      run: |
        cd openwrt/bin/targets/*/*
        # 整理固件包时候,删除您不想要的固件或者文件,让它不需要上传到Actions空间
        rm -rf packages
        rm -rf feeds.buildinfo
        rm -rf version.buildinfo
        rm -rf *kernel.bin
        rm -rf profiles.json
        rm -rf *rootfs.img
        rm -rf *rootfs.tar.gz
        rm -rf *.manifest
        rm -rf sha256sums
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
        
    - name: 上传固件
      uses: actions/upload-artifact@main
      with:
        name: ${{github.event.inputs.URL}}${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
